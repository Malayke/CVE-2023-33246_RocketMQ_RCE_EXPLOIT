import socket
import json
import sys
from concurrent.futures import ThreadPoolExecutor
import argparse

def check_vulnerability(ip, port):
    data1 = '000000c7000000c37b22636f6465223a3130352c226578744669656c6473223a7b225369676e6174757265223a222f7535502f775a5562686a616e75344c4d2f557a45646f327532493d222c22746f706963223a22544257313032222c224163636573734b6579223a22726f636b65746d7132227d2c22666c6167223a302c226c616e6775616765223a224a415641222c226f7061717565223a312c2273657269616c697a655479706543757272656e74525043223a224a534f4e222c2276657273696f6e223a3430317d'
    try:
        # Create a socket object
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(3)
        # Connect to the server at the specified IP and port
        s.connect((ip, port))

        # Send the payload
        s.sendall(bytes.fromhex(data1))
        resp = s.recv(1024)
        # Close the socket
        s.close()
    except socket.timeout:
        sys.stderr.write(f"{ip} is not reachable\n")
        sys.exit(1)
        
    if  not resp:
        print(f"{ip} is not reachable, revice nothing from {port}.\n")
        sys.exit(1)
    
    data = resp[8:].decode()
    p1,p2 = data.split('}{')
    p1 += '}'

    status = json.loads(p1)
    version = int(status.get('version'))
    if version < 433:
        print(f"\n{ip} Vulnerable to CVE-2023-33246 RocketMQ RCE")
        p2 = '{' + p2
        for b in range(0, 10):
            if ':{'+str(b)+':' in p2:
                p2 = p2.replace(':{'+str(b)+':', ':{"'+str(b)+'":')

        for broker_addrs in json.loads(p2).get('brokerDatas'):
            for broker in broker_addrs.get('brokerAddrs').values():
                print(f"broker: {broker}")
    else:
        print(f"\n{ip} Not Vulnerable to CVE-2023-33246 RocketMQ RCE")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Check CVE-2023-33246 RocketMQ RCE vulnerability")
    parser.add_argument("--ip", help="A single IP address to check")
    parser.add_argument("--file", help="A file containing a list of IP addresses, one per line")
    parser.add_argument("--port", type=int, default=9876, help="The port number to use when connecting to the server (default is 9876)")
    args = parser.parse_args()
    ip_list = []

    if args.ip:
        ip_list.append(args.ip)
    if args.file:
        with open(args.file, "r", encoding='utf-8') as f:
            for line in f:
                ip_list.append(line.strip())

    if not ip_list:
        print("Please provide at least one IP address using --ip or --file")
        return

    with ThreadPoolExecutor() as executor:
        for ip in ip_list:
            executor.submit(check_vulnerability, ip, args.port)

if __name__ == "__main__":
    main()
