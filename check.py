import socket
import json
import sys
from concurrent.futures import ThreadPoolExecutor
import argparse
import requests
from urllib.parse import urlparse

def detect_version(ip,port,data):
    parsed_data = data

    # extracting brokerAddrs
    broker_addrs = []
    for broker_name, broker_data in parsed_data['data']['clusterInfo']['brokerAddrTable'].items():
        broker_addrs.append(broker_data['brokerAddrs'])

    # extracting brokerVersionDesc
    broker_version_descs = []
    for broker_name, broker_data in parsed_data['data']['brokerServer'].items():
        for broker_id, broker_id_data in broker_data.items():
            broker_version_descs.append(broker_id_data['brokerVersionDesc'])

    for version in broker_version_descs:
        col1,col2,col3 = version[1:].split('_')
        version_str = col1 + '.' + col2 + '.' + col3
        version = int(col1)*100 + int(col2)*10 + int(col3)
        if version < 511:
            print('{ip}:{port} Vulnerable to CVE-2023-33246 RocketMQ RCE, broker version {version_str} < 5.1.1, broker addr: {broker_addrs}'.format(ip=ip ,port=port,version_str=version_str, broker_addrs=broker_addrs))
        else:
            print("{ip}:{port} NOT Vulnerable to CVE-2023-33246 RocketMQ RCE".format(ip=ip, port=port))

def is_rocketmq_dashboard(ip, port):
    try:
        resp = requests.get("http://{ip}:{port}/cluster/list.query".format(ip=ip, port=port), timeout=(5,5))
        if resp.status_code == 200 and 'json' in resp.headers['Content-Type']:
            data = resp.json()
            detect_version(ip,port,data)
    except Exception as e:
        # sys.stderr.write("{ip}:{port} is not reachable: {e}\n".format(ip=ip, port=port, e=e))
        return False
    
    return True

def send_data_to_broker(ip, port):
    resp = None
    data1 = '000000c7000000c37b22636f6465223a3130352c226578744669656c6473223a7b225369676e6174757265223a222f7535502f775a5562686a616e75344c4d2f557a45646f327532493d222c22746f706963223a22544257313032222c224163636573734b6579223a22726f636b65746d7132227d2c22666c6167223a302c226c616e6775616765223a224a415641222c226f7061717565223a312c2273657269616c697a655479706543757272656e74525043223a224a534f4e222c2276657273696f6e223a3430317d'
    try:
        # Create a socket object
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(3)
        # Connect to the server at the specified IP and port
        s.connect((ip, port))

        # Send the payload
        s.sendall(bytes.fromhex(data1))
        resp = s.recv(1024)
        if  not resp:
            print("{ip} is not reachable, revice nothing from {port}.".format(ip=ip, port=port))
        # Close the socket
        s.close()
    except Exception as e:
        sys.stderr.write("{ip}:{port} is not reachable: {e}\n".format(ip=ip, port=port, e=e))
    return resp

def check_vulnerability(target):
    ip, port = target.get('ip'), int(target.get('port'))
    result = "{ip}:{port} NOT Vulnerable to CVE-2023-33246 RocketMQ RCE".format(ip=ip,port=port)
    if not is_rocketmq_dashboard(ip, port):
        resp = send_data_to_broker(ip, port)
        # try:
        data = resp[8:].decode()
        if data.startswith('{'):
            p1,p2 = data.split('}{')
            p1 += '}'
            status = json.loads(p1)
            version = int(status.get('version'))
            if version < 433:
                p2 = '{' + p2
                for b in range(0, 10):
                    if ':{'+str(b)+':' in p2:
                        p2 = p2.replace(':{'+str(b)+':', ':{"'+str(b)+'":')
                    if str(b)+':"' in p2:
                        p2 = p2.replace(str(b)+':"', '"'+str(b)+'":"')
                broker_addr = []
                for broker_addrs in json.loads(p2).get('brokerDatas'):
                    for broker in broker_addrs.get('brokerAddrs').values():
                        broker_addr.append(broker)
                result = "{ip}:{port} Vulnerable to CVE-2023-33246 RocketMQ RCE, brokers: {broker_addr}".format(ip=ip, port=port, broker_addr=', '.join(broker_addr))
    if result:
        print(result)

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Check CVE-2023-33246 RocketMQ RCE vulnerability")
    parser.add_argument("--ip", help="A single IP address to check")
    parser.add_argument("--file", help="A file containing a list of IP addresses, one per line")
    parser.add_argument("--port", type=int, default=9876, help="The port number to use when connecting to the server (default is 9876)")
    args = parser.parse_args()
    target_list = []

    if args.ip:
        target_list.append({'ip': args.ip, 'port': args.port})
    if args.file:
        with open(args.file, "r", encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('http'):
                    ip, port = urlparse(line).netloc.split(':')
                    target_list.append({'ip': ip, 'port': port})
                elif ':' in line:
                    ip, port = line.split(':')
                    target_list.append({'ip': ip, 'port': port})
                else:
                    target_list.append({'ip': line, 'port': args.port})

    if not target_list:
        print("Please provide at least one IP address using --ip or --file")
        return

    with ThreadPoolExecutor(max_workers=12) as executor:
        for target in target_list:
            executor.submit(check_vulnerability, target)

if __name__ == "__main__":
    main()
